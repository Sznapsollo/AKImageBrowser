(function(){
  'use strict';
  app.controller('PageController',
    function PageController($scope, $route, $location, $timeout) {						var self = this;		this.timerAutoRefresh;		this.imageWidth = GetLocalStorage(imagesWidthStorageName, imagesWidthDefault);		this.fileTypes = GetLocalStorage(fileTypesStorageName, fileTypesDefault);		this.showFileTimes = GetLocalStorage(fileTimesStorageName, true);		this.showFileNames = GetLocalStorage(fileNamesStorageName, true);		this.autoRefresh = GetLocalStorage(autoRefreshStorageName, false);		this.autoRefreshInterval = GetLocalStorage(autoRefreshIntervalStorageName, autoRefreshIntervalDefault);		this.hideDescriptionsBelow = GetLocalStorage(hideDescriptionsStorageName, hideDescriptionsStorageDefault);		this.fileTypesTemp = this.fileTypes;				this.maxWidth = $("#middleSection .inner").width();			this.showDescriptions = function() {			return this.imageWidth > this.hideDescriptionsBelow;		}	
		this.redirectToMain = function() {
			$location.path('/images/0/' + GetLocalStorage(itemsPerPageStorageName, itemsPerPageDefault));
		};				this.rememberImageWidth = function(value) {					}				this.closeOptions = function() {			reloadRoute();		}				this.saveOptions = function() {			SetLocalStorage(fileTypesStorageName, this.fileTypes);			SetLocalStorage(imagesWidthStorageName, this.imageWidth);			SetLocalStorage(fileTimesStorageName, this.showFileTimes);			SetLocalStorage(fileNamesStorageName, this.showFileNames);			SetLocalStorage(hideDescriptionsStorageName, this.hideDescriptionsBelow);			SetLocalStorage(autoRefreshStorageName, this.autoRefresh);			SetLocalStorage(autoRefreshIntervalStorageName, this.autoRefreshInterval);						this.closeOptions();			initAutoRefresh();		}				this.resetfileTypes = function() {			this.fileTypes = fileTypesDefault;		}				this.resetImageWidth = function() {			this.imageWidth = imagesWidthDefault;		}				this.resetHideDescriptionsBelow = function() {			this.hideDescriptionsBelow = hideDescriptionsStorageDefault;		}				function initAutoRefresh()		{			if(self.timerAutoRefresh)				$timeout.cancel(self.timerAutoRefresh);					checkInterval(reloadRoute, autoRefreshTimeInterval, canRunAutoRefresh);		};				function checkInterval(fn, timeInterval, canProceed) {					if(!canProceed())				return;					self.timerAutoRefresh = $timeout(fn, 1000 * timeInterval());						return self.timerAutoRefresh.then(function(data) {				checkInterval(fn, timeInterval, canProceed);			});		}				function canRunAutoRefresh() {			return self.autoRefresh;		}				function autoRefreshTimeInterval() {			return self.autoRefreshInterval;		}				function reloadRoute() {			$route.reload();		}				$scope.$on('$destroy', function(){			$timeout.cancel(self.timerAutoRefresh);		});				initAutoRefresh();
    }
  );
})();